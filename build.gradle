import java.time.Instant

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.21.RELEASE'
    id 'org.flywaydb.flyway' version '4.1.2'
    id 'org.sonarqube' version '2.7'
    id 'com.avast.gradle.docker-compose' version '0.8.10'
    id 'com.moowork.node' version '1.2.0'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'

group = serviceGroup
version = serviceVersion
archivesBaseName = serviceName
project.ext.buildTime = Instant.now().toString() // for versioning
sourceCompatibility = 1.8
targetCompatibility = 1.8
ext {
    debeziumVersion = '1.9.4.Final'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://jaspersoft.jfrog.io/jaspersoft/third-party-ce-artifacts/" }
    maven { url "http://jasperreports.sourceforge.net/maven2/" }
    maven { url 'https://packages.confluent.io/maven/' }
    maven { url "http://localhost:8091/repository/maven-public/" }
    // for local debug
    maven { url "http://10.0.0.90:8091/repository/maven-public/" }
}

// NOTE: do NOT use implementation, otherwise the SpringBoot won't pack the dependencies into the fat jar
dependencies {
    compile 'org.openlmis:siglus-api-extension:2.1.11'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-rest'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-security'
    compile 'org.springframework.security.oauth:spring-security-oauth2'
    compile 'org.springframework:spring-context-support'
    compile 'org.springframework.retry:spring-retry'
    compile 'org.springframework.integration:spring-integration-file'
    compile 'org.hibernate:hibernate-java8'
    compile 'net.sf.ehcache:ehcache:2.10.9.2'
    compile 'org.hibernate:hibernate-ehcache:5.0.12.Final'
    compile 'org.flywaydb:flyway-core:4.1.2'
    compile 'org.springframework.boot:spring-boot-starter-data-redis:1.5.21.RELEASE'
    compile 'org.openlmis:openlmis-service-util:3.0.0'
    compile 'org.jadira.usertype:usertype.core:5.0.0.GA'
    compile 'org.postgresql:postgresql:42.3.3'
    compile 'com.google.guava:guava:18.0'
    compile 'org.webjars.npm:api-console:3.0.17'
    compile 'org.apache.commons:commons-lang3:3.6'
    compile 'org.apache.commons:commons-csv:1.4'
    compile 'org.apache.commons:commons-collections4:4.1'
    compile 'org.apache.commons:commons-compress:1.21'
    compile 'commons-io:commons-io:2.5'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compile 'net.sf.jasperreports:jasperreports:6.3.0'
    compile 'org.slf4j:slf4j-ext:1.7.25'
    compile 'org.openlmis:openlmis-service-util:3.1.0'
    compile 'org.apache.camel:camel-core:2.18.0'
    compile 'com.alibaba:easyexcel:3.1.1'
    compile 'org.apache.poi:poi:4.1.2'
    compile 'org.apache.poi:poi-ooxml:4.1.2'
    compile 'com.amazonaws:aws-java-sdk-s3:1.12.319'
    compile 'org.owasp:security-logging-logback:1.1.6'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    compile 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    compile 'com.google.code.findbugs:annotations:3.0.1'
    compile 'org.zalando:problem-spring-web:0.23.0'
    compile 'com.alibaba.fastjson2:fastjson2:2.0.16'
    compile 'org.zalando:logbook-spring-boot-starter:2.11.0'
    compile 'org.javers:javers-spring-boot-starter-sql:3.11.6'
    compile 'net.minidev:asm:1.0.2'
    compile 'net.minidev:json-smart:2.4.7'
    compile 'commons-jxpath:commons-jxpath:1.3'
    compile 'net.logstash.logback:logstash-logback-encoder:6.6'
    compile 'org.springframework.security:spring-security-jwt:1.1.1.RELEASE'
    compile 'io.jsonwebtoken:jjwt-api:0.11.5'
    compile 'io.jsonwebtoken:jjwt-impl:0.11.5'
    compile 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    compile 'net.javacrumbs.shedlock:shedlock-provider-jdbc-template:4.41.0'
    compile 'net.javacrumbs.shedlock:shedlock-spring:4.41.0'
    compile 'ma.glasnost.orika:orika-core:1.5.4'

    // for referencedata
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.security.oauth:spring-security-oauth2"
    compile "org.slf4j:slf4j-ext:1.7.25"
    compile 'org.hibernate:hibernate-spatial:5.0.11.Final'
    compile 'com.bedatadriven:jackson-datatype-jts:2.2'
    compile 'org.joda:joda-money:0.12'
    compile 'net.sf.supercsv:super-csv:2.4.0'
    compile 'net.sf.supercsv:super-csv-dozer:2.4.0'
    compile 'ca.uhn.hapi.fhir:hapi-fhir-client:3.7.0'
    compile 'ca.uhn.hapi.fhir:hapi-fhir-structures-r4:3.7.0'
    compile 'org.togglz:togglz-legacy-spring-boot-starter:2.6.1.Final'
    compile 'org.togglz:togglz-console:2.6.1.Final'
    compile 'org.togglz:togglz-spring-security:2.6.1.Final'
    compile 'org.togglz:togglz-redis:2.6.1.Final'
    // cdc debezium
    compile "io.debezium:debezium-api:${debeziumVersion}"
    compile "io.debezium:debezium-embedded:${debeziumVersion}"
    compile "io.debezium:debezium-connector-postgres:${debeziumVersion}"
    compile 'io.confluent:kafka-connect-jdbc:10.4.0'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
    testCompile 'junit:junit'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.assertj:assertj-core:3.23.1'
    testCompile('com.github.tomakehurst:wiremock:1.58') {
        exclude group: 'org.mortbay.jetty', module: 'jetty'
    }
    testCompile 'org.powermock:powermock-api-mockito:1.6.5'
    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.flywaydb.flyway-test-extensions:flyway-spring-test:4.1.0'
    testCompile 'org.springframework.security:spring-security-test'
    testCompile 'org.springframework:spring-test'
    testCompile 'com.jayway.restassured:rest-assured:2.7.0'
    testCompile 'guru.nidi.raml:raml-tester:0.8.9'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.4'
    testCompile 'be.joengenduvel.java.verifiers:to-string:1.0.2'
    testRuntimeOnly 'com.h2database:h2:2.1.214'
}

/*
 * Configures system and environment variables, for the given task, when said task is started
 * with docker-compose plugin providing services.
 */
ext.configureForDockerCompose = { task ->
    // source .env file for postgres username and password
    def envProps = new Properties()
    file('.env').withInputStream{ it -> envProps.load(it) }
    def postgresUser = envProps.getProperty('POSTGRES_USER')
    def postgresPass = envProps.getProperty('POSTGRES_PASSWORD')
    task.environment "POSTGRES_USER", postgresUser
    task.environment "POSTGRES_PASSWORD", postgresPass

    // source log host and port from docker compose
    def log = dockerCompose.servicesInfos.log.firstContainer
    task.systemProperty 'log.host', log.host
    task.systemProperty 'log.port', 514
    //task.systemProperty 'log.port', log.ports[514] this doesn't work yet https://github.com/avast/gradle-docker-compose-plugin/issues/176

    // source postgres host and port from docker compose
    def db = dockerCompose.servicesInfos.db.firstContainer
    task.environment "DATABASE_URL", "jdbc:postgresql://${db.host}:${db.port}/open_lmis"
}

/*
 * Checking for docker is a proxy for determining if docker-compose should be used
 * to start needed services
 */
ext.checkForDocker = { ->
    def result = exec {
        def command = "command -v docker"
        ignoreExitValue = true
        executable "bash" args "-l", "-c", command
    }
    if (0 == result.getExitValue()) {
        println "has Docker"
        return true
    } else {
        println "Docker not found"
        return false
    }
}

dockerCompose {
    stopContainers = true
}

tasks.withType(Test) {
    environment 'BASE_URL', "http://localhost"
}

// Usage: gradle generateMigration [-PmigrationName=name_of_migration]
//          Defaults to 'migration' as migration name
// Example: gradle generateMigration -PmigrationName=add_column_to_users
//          Will create a file in migration folder with name yyyyMMddHHmmssSSS_add_column_to_users.sql.
task generateMigration << {
    description 'Creates an empty new file within the src/main/resources/db/migration directory into which developers can add new SQL migration code.'
    def fileName = project.hasProperty('migrationName') ? migrationName : 'migration'
    def timestamp = new Date().format('yyyyMMddHHmmssSSSS', TimeZone.getTimeZone('GMT'))
    def fullFileName = "${timestamp}__${fileName}.sql"
    def migrationFile = new File(sourceSets.main.resources.srcDirs.first(), 'db/migration/siglus/' + fullFileName)
    migrationFile << "-- WHEN COMMITTING OR REVIEWING THIS FILE: Make sure that the timestamp in the file name (that serves as a version) is the latest timestamp, and that no new migration have been added in the meanwhile.\n"
    migrationFile << "-- Adding migrations out of order may cause this migration to never execute or behave in an unexpected way.\n"
    migrationFile << "-- Migrations should NOT BE EDITED. Add a new migration to apply changes."
    migrationFile.createNewFile()
}

task checkApiIsRaml(type: Exec) {
    executable "raml-cop"
    args "src/main/resources/api-definition.yaml"
}

configure(checkApiIsRaml) {
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = 'Verify that the api-specification is valid RAML'
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

jacoco {
    toolVersion = "0.8.6"
}

def jacocoTestExclusion = [
        'org/siglus/siglusapi/*.class',
        'org/siglus/siglusapi/constant',
        'org/siglus/siglusapi/i18n',
        'org/siglus/siglusapi/service/client',
        'org/siglus/siglusapi/domain',
        'org/siglus/siglusapi/repository',
        'org/siglus/siglusapi/exception',
        'org/siglus/siglusapi/dto',
        'org/siglus/siglusapi/config',
        'org/siglus/siglusapi/errorhandling',
        'org/siglus/siglusapi/scheduledtask',
        'org/siglus/siglusapi/service/SiglusLocalIssueVoucherService.class'
]

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoTestExclusion)
        })
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoTestExclusion)
        })
    }
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.74
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
    }
}

sonarqube {
    properties {
        property 'sonar.coverage.exclusions', '**/org/siglus/siglusapi/*.java, ' +
                '**/org/siglus/siglusapi/constant/**, ' +
                '**/org/siglus/siglusapi/i18n/**, ' +
                '**/org/siglus/siglusapi/service/client/**, ' +
                '**/org/siglus/siglusapi/domain/**, ' +
                '**/org/siglus/siglusapi/repository/**,' +
                '**/org/siglus/siglusapi/config/**'
    }
}

check {
    dependsOn jacocoTestCoverageVerification
}

checkstyle {
    toolVersion = "8.12"
}

pmd {
    toolVersion = '5.4.0'
    consoleOutput = true
    ignoreFailures = false
    ruleSetFiles = files("config/pmd/ruleset.xml")
    reportsDir = file("build/reports/pmd")
}

tasks.withType(Pmd) {
    reports {
        xml.enabled true
        html.enabled true
    }
}

apply from: "documentation.gradle"

processResources {
    filesMatching('**/version.properties') {
        expand(project.properties)
    }
}

apply from: "registration.gradle"

assemble {
    dependsOn npm_run_runApiHtmlConverter
    dependsOn copyConsulRegistrationToBuild
    dependsOn jacocoTestReport
}
