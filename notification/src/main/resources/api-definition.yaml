#%RAML 0.8
title: OpenLMIS Notification API
version: "@version@"
baseUri: "@baseUrl@"
protocols: [ HTTP, HTTPS ]

schemas:
    - notification: !include schemas/notification.json
    - notificationPage: !include schemas/notificationPage.json
    - userContactDetails: !include schemas/userContactDetails.json
    - userContactDetailsPage: !include schemas/userContactDetailsPage.json
    - emailVerificationToken: !include schemas/emailVerificationToken.json
    - digestConfiguration: !include schemas/digestConfiguration.json
    - digestConfigurationPage: !include schemas/digestConfigurationPage.json
    - userSubscription: !include schemas/userSubscription.json
    - userSubscriptionList: |
        {
            "type": "array",
            "items": { "type": "object", "$ref": "schemas/userSubscription.json" }
        }
    - localizedMessage: !include schemas/localizedMessage.json

traits:
    - secured:
          queryParameters:
              access_token:
                  displayName: access_token
                  description: OAuth2 access token
                  type: string
                  required: false
                  repeat: false
          headers:
              Authorization:
                  displayName: Authorization
                  description: OAuth2 authorization token header. Takes the form of 'Bearer <token>'.
                  type: string
                  required: false
                  repeat: false
    - paginated:
          queryParameters:
              page:
                  description: The page number which should be displayed. Note that the first page is numbered zero rather than one. Additionally, negative and undefined values are interpreted as zero.
                  type: integer
                  required: false
                  repeat: false
              size:
                  description: The desired size of each page. This specifies the maximum number of values that should be returned by the server. Zero, undefined, and negative values should result in all possible values being returned.
                  type: integer
                  required: false
                  repeat: false
    - sorted:
          queryParameters:
              sort:
                  description: Sorting criteria in the format "property(,asc|desc)". Default sort order is ascending. Multiple sort criteria are supported.
                  type: string
                  required: false
                  repeat: true

/api:
  /notifications:
      displayName: Notification
      post:
          is: [ secured ]
          description: Send a notification to the given user with provided messages.
          body:
              application/json:
                  schema: notification
          responses:
              200:
                  description: The notification request has been accepted and sent to the given user.
              401:
                  description: The request does not contain a token.
              403:
                  description: The request is invalid.
                  body:
                      application/json:
                          schema: localizedMessage
              400:
                  description: The request body is incorrect
                  body:
                      application/json:
                          schema: localizedMessage
      get:
          is: [ secured, paginated, sorted ]
          description: Get notifications.
          queryParameters:
              userId:
                  description: >
                    This field represents a user id. Use it if you want to find notifications
                    related to the given user.
                  type: string
                  required: false
                  repeat: false
              sendingDateFrom:
                  description: >
                    Reduce the number of notifications in a response to those that were sent after
                    the given sending date.
                  type: string
                  required: false
                  repeat: false
              sendingDateTo:
                  description: >
                      Reduce the number of notifications in a response to those that were sent
                      before the given sending date.
                  type: string
                  required: false
                  repeat: false
          responses:
              200:
                  body:
                      application/json:
                          schema: notificationPage
  /userContactDetails:
      displayName: User Contact Details
      get:
          is: [ secured, paginated, sorted ]
          description: >
            Get all user contact details that are matching given request parameters. If no
            parameters, all user contact details are returned.
          queryParameters:
              id:
                  description: This field represents a user id.
                  type: string
                  required: false
                  repeat: true
              email:
                  description: >
                    This field represents an email address. It is possible to pass only some part
                    of the email address for example @openlmis.org to find all users that have the
                    email address in the openlmis.org domain.
                  type: string
                  required: false
                  repeat: false
          responses:
              200:
                  body:
                      application/json:
                          schema: userContactDetailsPage
              400:
                  body:
                      application/json:
                          schema: localizedMessage
              403:
                  body:
                      application/json:
                          schema: localizedMessage
      /{id}:
          uriParameters:
              id:
                  displayName: id
                  type: string
                  required: true
                  repeat: false
          get:
              is: [ secured ]
              description: Get user contact details.
              responses:
                  200:
                      body:
                          application/json:
                              schema: userContactDetails
                  404:
                      body:
                          application/json:
                              schema: localizedMessage
                  403:
                      body:
                          application/json:
                              schema: localizedMessage
          put:
              is: [ secured ]
              description: Update user contact details.
              body:
                  application/json:
                      schema: userContactDetails
              responses:
                  200:
                      body:
                          application/json:
                              schema: userContactDetails
                  400:
                      body:
                          application/json:
                              schema: localizedMessage
                  403:
                      body:
                          application/json:
                              schema: localizedMessage
          /verifications:
              get:
                  is: [ secured ]
                  description: Get pending verification for a user.
                  responses:
                      200:
                          description: Get pending verifications for the given user
                          body:
                              application/json:
                                  schema: emailVerificationToken
                      404:
                          description: User contact details with the given id does not exist.
                          body:
                              application/json:
                                  schema: localizedMessage
                      403:
                          description: The current logged user has no permission to perform action.
                          body:
                              application/json:
                                  schema: localizedMessage
              post:
                  is: [ secured ]
                  description: Resend verification for the current user.
                  responses:
                      200:
                          description: Verification has been sent
                      400:
                          description: There were issues with sending verification.
                          body:
                              application/json:
                                  schema: localizedMessage
                      404:
                          description: User contact details with the given id does not exist.
                          body:
                              application/json:
                                  schema: localizedMessage
                      403:
                          description: The current logged user has no permission to perform action.
                          body:
                              application/json:
                                  schema: localizedMessage
              /{token}:
                  get:
                      description: Verifies the given email address
                      responses:
                         200:
                             description: Email verified successfully
                             body:
                                 application/json:
                                    schema: localizedMessage
                         400:
                             description: There were issues with email verification.
                             body:
                                 application/json:
                                    schema: localizedMessage
  /digestConfiguration:
      displayName: Digest Configuration
      get:
          is: [ secured, paginated, sorted ]
          description: Get all available digest configurations.
          responses:
              200:
                  description: The request is valid and a page of digest configurations has been returned.
                  body:
                      application/json:
                          schema: digestConfigurationPage
              401:
                  description: The request does not contain a token or the token might be invalid.
                  body:
                      application/json:
      /{id}:
          uriParameters:
              id:
                  displayName: id
                  type: string
                  required: true
                  repeat: false
          get:
              is: [ secured ]
              description: Get digest configuration.
              responses:
                  200:
                      description: The request is valid and a digest configuration has been returned.
                      body:
                          application/json:
                              schema: digestConfiguration
                  401:
                      description: The request does not contain a token or the token might be invalid.
                      body:
                          application/json:
                  404:
                      description: The server could not find a user with the given id
                      body:
                          application/json:
                              schema: localizedMessage
  /users:
    /{id}:
        uriParameters:
            id:
                displayName: id
                type: string
                required: true
                repeat: false
        /subscriptions:
            get:
                is: [ secured ]
                description: Get user subscriptions.
                responses:
                    200:
                        description: The request is valid and a list of user subscriptions has been returned.
                        body:
                            application/json:
                                schema: userSubscriptionList
                    401:
                        description: The request does not contain a token or the token might be invalid.
                        body:
                            application/json:
                    403:
                        description: The server understood the request but refuses to authorize it.
                        body:
                            application/json:
                                schema: localizedMessage
                    404:
                        description: The server could not find a user with the given id
                        body:
                            application/json:
                                schema: localizedMessage
            post:
                is: [ secured ]
                description: Create user subscriptions.
                body:
                    application/json:
                        schema: userSubscriptionList
                responses:
                    200:
                        description: The request is valid and the user subscriptions have been created.
                        body:
                            application/json:
                                schema: userSubscriptionList
                    400:
                        description: The request's body is invalid
                        body:
                            application/json:
                                schema: localizedMessage
                    401:
                        description: The request does not contain a token or the token might be invalid.
                        body:
                            application/json:
                    403:
                        description: The server understood the request but refuses to authorize it.
                        body:
                            application/json:
                                schema: localizedMessage
                    404:
                        description: The server could not find a user with the given id
                        body:
                            application/json:
                                schema: localizedMessage
