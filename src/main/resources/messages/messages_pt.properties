# siglus android message
siglusapi.error.validationFail=Falha de validação.
#TODO for Dianna to translate
siglus.validation.requisition.usageLineItems.missingGroup=Missing group ${groupName}
siglus.validation.requisition.usageLineItems.extraGroups=Extra groups ${groupNames}
siglus.validation.requisition.usageLineItems.columns.missingColumn=Missing column ${columnName} in group ${groupName}
siglus.validation.requisition.usageLineItems.columns.extraColumns=Extra column ${columnNames} in group ${groupName}
siglus.validation.requisition.usageLineItems.columns.duplicateTotalColumns=More than 1 total column in group ${groupName}
siglus.validation.requisition.usageLineItems.columns.missingNonTotalColumns=No columns to sum up in group ${groupName}
siglus.validation.requisition.usageLineItems.columns.sumUpOverflow=Columns sum up overflow in group ${groupName}
siglus.validation.requisition.usageLineItems.columns.sumUpNotMatch=Columns sum is not equals to the total column in group ${groupName}
org.siglus.siglusapi.dto.android.constraint.stockcard.PositiveInitStockOnHand.message=The adjustment with soh[${stockOnHand}] is inconsistent with quantity[${quantity}].
org.siglus.siglusapi.dto.android.constraint.stockcard.StockOnHandConsistentWithQuantityByProduct.message=The product ${productCode} is not consistent \
  ${failedByGap=='true'? 'by gap': formatter.format('on %s(at %s)', date, createdAt)}.
org.siglus.siglusapi.dto.android.constraint.stockcard.StockOnHandConsistentWithQuantityByLot.message=The lot ${lotCode} of the product 08S01Z is not consistent \
  ${failedByGap=='true'? 'by gap': formatter.format('on %s(at %s)', date, createdAt)}.
org.siglus.siglusapi.dto.android.constraint.stockcard.ProductConsistentWithOwnLots.message=The stock card for ${productCode} on ${date}(at ${createdAt}) is inconsistent with its lot events.
org.siglus.siglusapi.dto.android.constraint.stockcard.ProductConsistentWithAllLots.message=The product ${productCode} is not consistent \
  since it has less SOH than the sum its lots' ${formatter.format('on %s(at %s)', date, createdAt)}.
org.siglus.siglusapi.dto.android.constraint.stockcard.KitProductEmptyLots.message=The product ${productCode} \
  ${existed=='true'? 'should not contain lot events since it\\\'s a kit product': 'is not a legal one'}.
org.siglus.siglusapi.dto.android.constraint.stockcard.NonKitProductNotEmptyLots.message=The product ${productCode} should contain at least one lot event since it's not a kit product.
org.siglus.siglusapi.dto.android.constraint.stockcard.LotStockConsistentWithExisted.message=The ${failedByNewLot=='true'? 'init SOH': failedByDate=='true'? 'occurred date': 'SOH'} \
   of the ${failedByNewLot=='true'? 'new ': ''}lot ${lotCode}(of the product ${productCode}) should be \
  ${failedByNewLot=='true'? '0': failedByDate=='true'? formatter.format('equals to or after %s', existedDate): existedSoh} but it\'s \
  ${failedByDate=='true'? date: soh}${failedByDate=='true'? '': formatter.format(' on %s', date)}.
org.siglus.siglusapi.dto.android.constraint.RequisitionValidStartDate.message=The ${failedByPeriod=='true'? formatter.format('period %s', periodName): formatter.format('start date %s', startDate)} should be \
  ${failedByReportRestartDate=='true'? formatter.format('after the report restart date %s', reportRestartDate): (failedByPeriod=='true'? formatter.format('right after last period %s', lastPeriodName): formatter.format('equal to last actual end %s', lastActualEnd))}.
org.siglus.siglusapi.dto.android.constraint.RequisitionValidEndDate.message=The end date ${endDate} should be after start date ${startDate}.
org.siglus.siglusapi.dto.android.constraint.RequisitionValidNotNull.message=${nullProducts=='true'? ' products': ''}\
  ${nullRegimenLineItems=='true'?' regimenLineItems':''}${nullRegimenSummaryLineItems=='true'?' regimenSummaryLineItems':''}${nullPatientLineItems=='true'?' patientLineItems':''}\
  ${nullTestConsumptionLineItems=='true'?' testConsumptionLineItems':''}${nullUsageInfomationLineItems=='true'?' usageInfomationLineItems':''} may not be empty.
